#!../../snabb snsh
local intel = require("apps.intel_mp.intel_mp")
local pcap = require("apps.pcap.pcap")
local delay = require("apps.test.delayed_start")
local counter   = require("core.counter")
local basic = require("apps.basic.basic_apps")

local pci0 = os.getenv("SNABB_PCI_INTEL1G0")
local pci1 = os.getenv("SNABB_PCI_INTEL1G1")
local c = config.new()
engine.busywait = 1
config.app(c, "source0", pcap.PcapReader, "source.pcap")
config.app(c, "delay", delay.Delayed_start, 9)
config.app(c, "tee", basic.Tee)
config.app(c, "sink", basic.Sink)
config.app(c, "join", basic.Join)
config.app(c, "ric0", intel.Intel1g, {pciaddr=pci0, rxq = 0 })
config.app(c, "ric1", intel.Intel1g, {pciaddr=pci0, rxq = 1 })
config.app(c, "ric2", intel.Intel1g, {pciaddr=pci0, rxq = 2 })
config.app(c, "ric3", intel.Intel1g, {pciaddr=pci0, rxq = 3 })
config.app(c, "nic0", intel.Intel1g, {pciaddr=pci1, txq = 0})
config.app(c, "nic1", intel.Intel1g, {pciaddr=pci1, txq = 1})
config.app(c, "nic2", intel.Intel1g, {pciaddr=pci1, txq = 2})
config.app(c, "nic3", intel.Intel1g, {pciaddr=pci1, txq = 3})

config.link(c, "source0.output -> delay.input")
config.link(c, "delay.output -> tee.input")
config.link(c, "tee.output0 -> nic0.input")
config.link(c, "tee.output1 -> nic1.input")
config.link(c, "tee.output2 -> nic2.input")
config.link(c, "tee.output3 -> nic3.input")
config.link(c, "ric0.output -> join.input0")
config.link(c, "ric1.output -> join.input1")
config.link(c, "ric2.output -> join.input2")
config.link(c, "ric3.output -> join.input3")
config.link(c, "join.out -> sink.input")
engine.configure(c)
for i=1,12 do
  engine.main({duration = 1})
end

local slink = counter.read(engine.app_table.source0.output.output.stats.txpackets)
local olink = counter.read(engine.app_table.sink.input.input.stats.txpackets)
if 4 * slink == olink then
  main.exit(0)
else
  print("sent = " .. tostring(slink) .. ", received = " .. tostring(olink))
  main.exit(-1)
end
